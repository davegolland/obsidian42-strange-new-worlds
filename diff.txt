diff --git a/src/main.ts b/src/main.ts
index 275aa93..7acd061 100644
--- a/src/main.ts
+++ b/src/main.ts
@@ -26,6 +26,7 @@ import * as uiInits from "./ui/ui-inits";
 import { updateAllSnwLiveUpdateReferences } from "./view-extensions/htmlDecorations";
 import { BackendClient } from "./backend/client";
 import { createBackendLinksProvider } from "./backend/provider";
+import { InlineReferenceExtension } from "./view-extensions/references-cm6";
 
 export const UPDATE_DEBOUNCE = 200;
 
@@ -66,6 +67,7 @@ export default class SNWPlugin extends Plugin {
 	// Backend integration
 	private _backendClient: BackendClient | null = null;
 	private unregisterBackendProvider: (() => void) | null = null;
+	private backendProvider: any = null;
 
 	// Public getter for backend client
 	get backendClient(): BackendClient | null {
@@ -124,82 +126,38 @@ export default class SNWPlugin extends Plugin {
 	}
 
 	async onload(): Promise<void> {
-		// Load settings first to get diagnostic flags
-		log.time("initSettings");
-		try {
-			await this.initSettings();
-			log.timeEnd("initSettings");
-		} catch (error) {
-			log.error("Failed to load settings:", error);
-			log.warn("Using default settings");
-		}
+		console.log(`loading ${this.appName}`);
 
-		// Now that settings are loaded, set up diagnostic logging
-		if (this.settings.dev?.diagDecorations) {
-			window.addEventListener("error", (e) => log.error("window.error", e.error || e));
-			window.addEventListener("unhandledrejection", (e) => log.error("unhandledrejection", e.reason));
-			
-			// Log all fetch calls for development
-			const _fetch = window.fetch;
-			window.fetch = async (input: RequestInfo | URL, init?: RequestInit) => {
-				const url = typeof input === "string" ? input : input.toString();
-				log.debug("NET:", init?.method || "GET", url);
-				const t = `NET ‚è± ${init?.method || "GET"} ${url}`;
-				log.time(t);
-				try {
-					const resp = await _fetch(input, init);
-					log.timeEnd(t);
-					log.debug("NET: status", resp.status, url);
-					return resp;
-				} catch (e) {
-					log.timeEnd(t);
-					log.error("NET: error", url, e);
-					throw e;
-				}
-			};
-		}
-		
-		log.info("üîå onload(): start");
-		log.time("onload total");
-		log.mark("onload-start");
-
-		log.info("settings snapshot", JSON.stringify(this.settings));
-		log.debug("minimalMode value:", this.settings.minimalMode);
-		log.debug("Settings loaded, minimalMode check:", {
-			minimalMode: this.settings.minimalMode,
-			settingsSnapshot: JSON.stringify(this.settings)
-		});
-
-		// Always add settings tab early for toggling
+		// 1) Always load settings FIRST
+		await this.initSettings();
 		this.addSettingTab(new SettingsTab(this.app, this));
 
-		// Always initialize feature manager (needed for settings updates)
-		log.time("featureManager");
-		this.featureManager = new FeatureManager(this, this.settings, this.showCountsActive);
-		log.timeEnd("featureManager");
-
-		// Update feature manager with current settings and state (always needed)
-		this.featureManager.updateSettings(this.settings);
-		this.featureManager.updateShowCountsActive(this.showCountsActive);
-		
-		log.debug("About to check minimalMode:", this.settings.minimalMode);
+		// 2) Branch immediately
 		if (this.settings.minimalMode) {
-			log.info("üöÄ Minimal mode ENABLED ‚Äî backend-only path");
-			log.time("initAPI(minimal)");
-			await this.initAPI({ minimal: true });  // lightweight, no CM6/MD processors
-			log.timeEnd("initAPI(minimal)");
-
-			log.time("initBackend");
-			await this.initBackend();               // registers provider, starts status polling
-			log.timeEnd("initBackend");
-
-			log.timeEnd("onload total");
-			log.mark("onload-end");
-			log.measure("onload-total", "onload-start", "onload-end");
-			log.info("üéØ Minimal mode initialization complete");
+			console.log("SNW: üöÄ MINIMAL MODE ENABLED ‚Äî Backend-only surface");
+			console.log("SNW: Settings snapshot:", JSON.stringify(this.settings, null, 2));
+			await this.initAPI({ minimal: true });   // lightweight surface
+			await this.initBackend();                // registers backend provider
+			await this.initMinimalSurface();         // <‚Äî NEW: render inferred links
+			console.log("SNW: üéØ Minimal mode initialization complete");
+			return;
+		}
+
+		// 3) Legacy full mode (deprecated)
+		if (!this.settings.enableLegacyFullMode) {
+			console.log("SNW: ‚ö†Ô∏è  LEGACY FULL MODE DISABLED ‚Äî Switching to minimal mode");
+			console.log("SNW: To enable legacy full mode, set enableLegacyFullMode: true in settings");
+			this.settings.minimalMode = true;
+			await this.saveSettings();
+			await this.initAPI({ minimal: true });
+			await this.initBackend();
+			await this.initMinimalSurface();
+			console.log("SNW: üéØ Switched to minimal mode");
 			return;
 		}
 
+		console.log("SNW: ‚ö†Ô∏è  LEGACY FULL MODE ‚Äî This mode will be deprecated");
+		console.log("SNW: Settings snapshot:", JSON.stringify(this.settings, null, 2));
 		log.info("üîß Full mode initialization");
 
 		log.time("buildLinksAndReferences");
@@ -442,6 +400,33 @@ export default class SNWPlugin extends Plugin {
 		this.featureManager.apply();
 	}
 
+	/**
+	 * Initialize minimal surface for rendering inferred links
+	 */
+	private async initMinimalSurface(): Promise<void> {
+		// Only the pieces needed to draw inferred links:
+		// - implicit links manager (without local detectors / index)
+		// - CM6 decorations for inline marks + hover
+		// - the backend virtual provider
+
+		// 1) Start the implicit links manager in minimal mode
+		this.implicitLinksManager = new ImplicitLinksManager(this, this.settings.autoLinks);
+
+		// 2) Register ONLY the backend provider
+		this.backendProvider = createBackendLinksProvider(this.snwAPI, this._backendClient!);
+		this.snwAPI.registerVirtualLinkProvider(this.backendProvider);
+
+		// 3) Wire the minimal editor surface (decorations + hover)
+		//    (re-use your existing extensions, but just the inline/hover ones)
+		this.registerEditorExtension(InlineReferenceExtension); // from view-extensions/references-cm6.ts
+		
+		// Import the createInferredLinksExtension from manager.ts
+		const { createInferredLinksExtension } = await import("./implicit-links/manager");
+		this.registerEditorExtension(createInferredLinksExtension(this));
+
+		console.log("SNW: üß© Minimal surface ready (decorations + hover)");
+	}
+
 	/**
 	 * Initialize backend integration
 	 */
@@ -710,6 +695,13 @@ export default class SNWPlugin extends Plugin {
 		} else {
 			this.settings = Object.assign({}, DEFAULT_SETTINGS, loadedData);
 		}
+
+		// Migration: if minimalMode is undefined, set to true (new default)
+		if (this.settings.minimalMode === undefined) {
+			log.info("Migrating to minimal mode as default");
+			this.settings.minimalMode = true;
+			await this.saveSettings(); // Save the migration
+		}
 		
 		log.debug("settings.after.migrate:", this.settings);
 		log.debug("Settings loaded, minimalMode check:", {
diff --git a/src/settings.ts b/src/settings.ts
index 1210483..8988de2 100644
--- a/src/settings.ts
+++ b/src/settings.ts
@@ -87,6 +87,7 @@ export interface Settings {
 	autoLinks: AutoLinkSettings;
 	backend: BackendSettings;
 	minimalMode: boolean; // NEW: Enable minimal mode for debugging
+	enableLegacyFullMode: boolean; // NEW: Enable legacy full mode (deprecated)
 }
 
 export const DEFAULT_SETTINGS: Settings = {
@@ -148,7 +149,8 @@ export const DEFAULT_SETTINGS: Settings = {
 		baseUrl: "http://localhost:8000",
 		vaultName: undefined,
 	},
-	minimalMode: false,
+	minimalMode: true,
+	enableLegacyFullMode: false,
 };
 
 // For backward compatibility with older settings format
@@ -239,7 +241,8 @@ export function migrateSettings(legacySettings: LegacySettings): Settings {
 			baseUrl: "http://localhost:8000",
 			vaultName: undefined,
 		},
-		minimalMode: false,
+		minimalMode: true,
+		enableLegacyFullMode: false,
 		dev: {
 			diagDecorations: false,
 			forceLegacy: false,
diff --git a/src/ui/components/uic-ref-area.tsx b/src/ui/components/uic-ref-area.tsx
index 37b95d5..75d1908 100644
--- a/src/ui/components/uic-ref-area.tsx
+++ b/src/ui/components/uic-ref-area.tsx
@@ -99,7 +99,8 @@ const getRefAreaItems = async (refType: string, key: string, filePath: string):
 		linksToLoop = referenceCountingPolicy.filterReferences(sortedCache);
 		
 		// Fallback: if nothing found and this is an implicit badge, show a friendly empty state
-		if (!linksToLoop.length && refType === 'implicit') {
+		// Also show fallback in Minimal Mode when there's no local index
+		if (!linksToLoop.length && (refType === 'implicit' || plugin.settings.minimalMode)) {
 			const hint = createDiv({ cls: "snw-ref-empty" });
 			hint.setText("No indexed backlinks (inferred link).");
 			const container = createDiv();
